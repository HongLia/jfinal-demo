package #(controllerPackageName);

import #(modelPackageName).#(tableMeta.modelName)DTO;
import #(serviceImport);
import cn.hutool.core.lang.UUID;
import cn.hutool.core.util.StrUtil;
import com.ambow.common.response.ResultData;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.Date;
import com.ambow.common.response.Result;

/**
 * #(tableMeta.remarks)控制层
 *
 * @author #(tableMeta.author)
 */
@Api(tags = "#(tableMeta.remarks)Rest")
@RestController
@RequestMapping("#(firstCharToLowerCase(tableMeta.modelName))")
public class #(tableMeta.modelName)Controller {
    #set(serverImplName = firstCharToLowerCase(tableMeta.modelName) + 'Service')
    /**
     * 服务对象
     */
    @Autowired
    private #(serviceName) #(serverImplName);

    @RequestMapping(value = "#(apiPrefix)/page", method = RequestMethod.POST)
    @ApiOperation(value = "分页查询", httpMethod = "POST")
    public Result page(@RequestBody #(tableMeta.modelName)DTO entity) {
        return #(serverImplName).show(entity, entity.getPageSize(), entity.getCurrentPage());
    }

    @RequestMapping(value = "#(apiPrefix)/list", method = RequestMethod.POST)
    @ApiOperation(value = "列表查询", httpMethod = "POST")
    public ResultData list(@RequestBody #(tableMeta.modelName)DTO entity) {
        return ResultData.buildSuccess(#(serverImplName).select(entity));
    }

    @RequestMapping(value = "#(apiPrefix)/{id}", method = RequestMethod.GET)
    @ApiOperation(value = "根据id查询详细信息", httpMethod = "GET")
    public ResultData queryById(@PathVariable("id") #(tableMeta.primaryKeyJavaType) id) {
        return ResultData.buildSuccess(#(serverImplName).selectByPrimaryKey(id));
    }

    @RequestMapping(value = "#(apiPrefix)/listByIds", method = RequestMethod.GET)
    @ApiOperation(value = "根据ids查询", httpMethod = "GET")
    public ResultData listByIds(@RequestParam(value = "ids", required = true) String ids) {
        return ResultData.buildSuccess(#(serverImplName).selectByIds(ids));
    }

    @RequestMapping(value = "#(apiPrefix)/add", method = RequestMethod.POST)
    @ApiOperation(value = "新增数据", httpMethod = "POST")
    public ResultData add(@RequestBody #(tableMeta.modelName)DTO entity) {
        #if(stringpk)
        entity.setId(UUID.fastUUID().toString());
        #end
        entity.setCreateTime(new Date());
        #(serverImplName).insertSelective(entity);
        return ResultData.buildSuccess(entity);
    }

    @RequestMapping(value = "#(apiPrefix)/update", method = RequestMethod.POST)
    @ApiOperation(value = "修改数据", httpMethod = "POST")
    public ResultData update(@RequestBody #(tableMeta.modelName)DTO entity) {
        entity.setUpdateTime(new Date());
        #(serverImplName).updateByPrimaryKeySelective(entity);
        return ResultData.buildSuccess(entity);
    }

    @RequestMapping(value = "#(apiPrefix)/delete", method = RequestMethod.GET)
    @ApiOperation(value = "根据ids删除数据", httpMethod = "GET")
    public ResultData delete(@RequestParam(value = "ids", required = true) String ids) {
        #(serverImplName).deleteByIds(ids);
        return ResultData.buildSuccess();
    }

    @RequestMapping(value = "#(apiPrefix)/logicDelete", method = RequestMethod.GET)
    @ApiOperation(value = "根据ids逻辑删除数据", httpMethod = "GET")
    public ResultData logicDelete(@RequestParam(value = "ids", required = true) String ids) {
        #(serverImplName).deleteByIds(ids);
        return ResultData.buildSuccess();
    }

}